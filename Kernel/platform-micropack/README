A FUZIX target for z80pack.

Test environment for a very squashed build to see what we can achieve in
64K + disk banking and explore ROM banking ideas

Not a useful target, but memory testing stuff

File system code is paged with the banks being 4K spaced 0xE00 length copies
of the bank and any fixed data that dribbles over the end.

TODO: 
Turn memory images into a loadable binary and a block for the disk
Preload the exec syscall bank into the main binary so startup works


Savings:

Other candidates for the bot which are big are waitpid at 380 bytes and
signal + sigdisp at 621 bytes the pair. signal/sigdisp normally occur only
at startup and signal handling so would be acceptable-ish, waitpid always
involves a task switch anyway. Neither are ideal but they might work.

Some inline tricks with tty might also save a tiny bit of RAM
Put the swap stack at 0x80-0xFF as we can't realistically run CP/M
emulation.

Other thoughts. When working with small app have a version of some of the
overlays that can be loaded in the top of app space - how to do relocations
and patches ?

Do we want to keep the overlays in the swap space gapped between each
swapped app. Disk swap is usually cheap spacewise and it would speed up
their fetching.
